{"version":3,"sources":["flames/ClassSelector.jsx","flames/FlameStat.jsx","flames/FlameScore.jsx","flames/Flames.jsx","app/App.jsx","index.jsx"],"names":["ClassSelector","type","onTypeChange","DropdownButton","title","variant","Dropdown","Item","onClick","FlameStat","name","min","max","statValue","onStatChange","Form","Group","as","Row","Label","column","sm","Col","Control","value","onChange","e","parseInt","target","defaultProps","FlameScore","useState","str","setStr","dex","setDex","int","setInt","luk","setLuk","att","setAtt","matt","setMatt","allStat","setAllStat","showFlameScore","toggleShowFlameScore","flameScore","setFlameScore","setType","classTypes","Map","Container","id","Button","flatStats","get","calculateFlameScore","block","Flames","fluid","Component","App","className","Tabs","defaultActiveKey","Tab","eventKey","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fae7016b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ClassSelector = ({ type, onTypeChange }) => {\r\n  return (\r\n    <DropdownButton\r\n      title={type !== \"none\" ? type : \"Class Type\"}\r\n      variant=\"dark\"\r\n    >\r\n      <Dropdown.Item onClick={() => onTypeChange(\"STR\")}>STR</Dropdown.Item>\r\n      <Dropdown.Item onClick={() => onTypeChange(\"DEX\")}>DEX</Dropdown.Item>\r\n      <Dropdown.Item onClick={() => onTypeChange(\"INT\")}>INT</Dropdown.Item>\r\n      <Dropdown.Item onClick={() => onTypeChange(\"LUK\")}>LUK</Dropdown.Item>\r\n    </DropdownButton>\r\n  );\r\n};\r\n\r\nClassSelector.propTypes = {\r\n  type: PropTypes.string.isRequired,\r\n  onTypeChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ClassSelector;\r\n","import PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Row from \"react-bootstrap/Row\";\r\n\r\nconst FlameStat = ({ name, min, max, statValue, onStatChange }) => {\r\n  return (\r\n    <Form.Group as={Row}>\r\n      <Form.Label column sm={4}>\r\n        {name}\r\n      </Form.Label>\r\n      <Col>\r\n        <Form.Control\r\n          type=\"number\"\r\n          min={min}\r\n          {...(max ? { max: max } : {})}\r\n          value={statValue}\r\n          onChange={(e) => onStatChange(parseInt(e.target.value, 10))}\r\n        />\r\n      </Col>\r\n    </Form.Group>\r\n  );\r\n};\r\n\r\nFlameStat.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  statValue: PropTypes.number.isRequired,\r\n  onStatChange: PropTypes.func.isRequired,\r\n  min: PropTypes.number,\r\n  max: PropTypes.number,\r\n};\r\n\r\nFlameStat.defaultProps = {\r\n  statValue: 0,\r\n  min: 0,\r\n};\r\n\r\nexport default FlameStat;\r\n","import React, { useState } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport ClassSelector from \"./ClassSelector\";\r\nimport FlameStat from \"./FlameStat\";\r\nimport \"./FlameScore.sass\";\r\n\r\nconst FlameScore = () => {\r\n  const [str, setStr] = useState(0);\r\n  const [dex, setDex] = useState(0);\r\n  const [int, setInt] = useState(0);\r\n  const [luk, setLuk] = useState(0);\r\n  const [att, setAtt] = useState(0);\r\n  const [matt, setMatt] = useState(0);\r\n  const [allStat, setAllStat] = useState(0);\r\n  const [showFlameScore, toggleShowFlameScore] = useState(false);\r\n  const [flameScore, setFlameScore] = useState(0);\r\n  const [type, setType] = useState(\"none\");\r\n\r\n  const calculateFlameScore = () => {\r\n    toggleShowFlameScore(true);\r\n    let flatStats = 0;\r\n    if (type !== \"none\") {\r\n      for (let stat of classTypes.get(type)) {\r\n        switch (stat) {\r\n          case \"STR\":\r\n            flatStats += str;\r\n            break;\r\n          case \"DEX\":\r\n            flatStats += dex;\r\n            break;\r\n          case \"INT\":\r\n            flatStats += int;\r\n            break;\r\n          case \"LUK\":\r\n            flatStats += luk;\r\n            break;\r\n          default:\r\n        }\r\n      }\r\n    }\r\n    let attFlameScore = type !== \"INT\" ? att * 4 : matt * 4;\r\n    setFlameScore(flatStats + attFlameScore + allStat * 10);\r\n  };\r\n\r\n  const classTypes = new Map([\r\n    [\"STR\", [\"STR\"]],\r\n    [\"DEX\", [\"DEX\"]],\r\n    [\"INT\", [\"INT\"]],\r\n    [\"LUK\", [\"LUK\"]],\r\n  ]);\r\n\r\n  return (\r\n    <Container>\r\n      <Row id=\"classSelectorContainer\">\r\n        <ClassSelector type={type} onTypeChange={setType} />\r\n      </Row>\r\n      <hr />\r\n      <Form id=\"flameScoreInputContainer\">\r\n        <FlameStat name=\"STR\" statValue={str} onStatChange={setStr} />\r\n        <FlameStat name=\"DEX\" statValue={dex} onStatChange={setDex} />\r\n        <FlameStat name=\"INT\" statValue={int} onStatChange={setInt} />\r\n        <FlameStat name=\"LUK\" statValue={luk} onStatChange={setLuk} />\r\n        <FlameStat name=\"ATT\" statValue={att} onStatChange={setAtt} />\r\n        <FlameStat name=\"MATT\" statValue={matt} onStatChange={setMatt} />\r\n        <FlameStat\r\n          name=\"% All Stat\"\r\n          statValue={allStat}\r\n          onStatChange={setAllStat}\r\n        />\r\n      </Form>\r\n      <hr />\r\n      <Row id=\"flameScoreContainer\">\r\n        <Col sm={4}>\r\n          <Button onClick={() => calculateFlameScore()} variant=\"dark\" block>\r\n            Calculate\r\n          </Button>\r\n        </Col>\r\n        <Col>{showFlameScore ? flameScore : null}</Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default FlameScore;\r\n","import React, { Component } from \"react\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport \"./Flames.sass\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport FlameScore from \"./FlameScore\";\r\n\r\nexport class Flames extends Component {\r\n  render() {\r\n    return (\r\n      <Container fluid>\r\n        <Row>\r\n          <Col sm={4}>\r\n            <FlameScore />\r\n          </Col>\r\n          <Col sm={8}>Imagine being able to cube during DMT.</Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Flames;\r\n","import React, { Component } from \"react\";\nimport Tabs from \"react-bootstrap/Tabs\";\nimport Tab from \"react-bootstrap/Tab\";\nimport Flames from \"../flames/Flames\";\nimport \"./App.sass\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nexport class App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Tabs defaultActiveKey=\"flames\">\n          <Tab eventKey=\"flames\" title=\"Flames\">\n            <Flames />\n          </Tab>\n        </Tabs>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./app/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}